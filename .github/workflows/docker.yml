name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write      # –Ω—É–∂–Ω–æ –¥–ª—è ghcr
      id-token: write      # –Ω–∞ –±—É–¥—É—â–µ–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π/provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # –∏–º—è –æ–±—Ä–∞–∑–∞: ghcr.io/OWNER/REPO
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ latest –¥–ª—è main:
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Get commit and tag
        id: vars
        run: |
          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "tag=$(git describe --tags --always)" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile               
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify Telegram
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "'"${{ secrets.TG_CHAT_ID }}"'",
              "parse_mode": "Markdown",
              "text": "‚úÖ *Docker –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã, –ù–ê–î–û –î–ï–ü–õ–û–ò–¢–¨!*\n\nüì¶ –û–±—Ä–∞–∑—ã:\n- `ghcr.io/${{ github.repository }}t`\n-\nüßë –ö–æ–º–º–∏—Ç: `${{ steps.vars.outputs.commit }}`\nüè∑Ô∏è –¢–µ–≥: `${{ steps.vars.outputs.tag }}`",
              "reply_markup": {
                "inline_keyboard": [[
                  {
                    "text": "üîç –û—Ç–∫—Ä—ã—Ç—å GitHub Actions",
                    "url": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'"
                  }
                ]]
              }
            }'

      - name: Notify Telegram on failure
        if: failure()
        run: |
          LOG_FPM=$(tail -n 30 fpm_build.log | sed 's/$/%0A/' | tr -d '\n')
          LOG_NGINX=$(tail -n 30 nginx_build.log | sed 's/$/%0A/' | tr -d '\n')
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "'"${{ secrets.TG_CHAT_ID }}"'",
              "parse_mode": "Markdown",
              "text": "‚ùå *–û—à–∏–±–∫–∞ –≤ GitHub Actions Workflow!*\n\nüßë –ê–≤—Ç–æ—Ä: ${{ github.actor }}\nüìù Commit: `${{ github.sha }}`",
              "reply_markup": {
                "inline_keyboard": [[
                  {
                    "text": "üìÑ –û—Ç–∫—Ä—ã—Ç—å –ª–æ–≥",
                    "url": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'"
                  }
                ]]
              }
            }'