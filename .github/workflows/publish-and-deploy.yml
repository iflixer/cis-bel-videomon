name: Build, Push to GHCR and Deploy to k3s

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: build-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  autotag:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # нужно для push tag
    outputs:
      tag: ${{ steps.next_tag.outputs.next }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Get latest tag
        id: get_tag
        run: |
          latest=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || echo "v0.0.0")
          echo "latest=$latest" >> $GITHUB_OUTPUT
          echo "Latest tag: $latest"

      - name: Calculate next tag (major/minor/patch)
        id: next_tag
        run: |
          latest="${{ steps.get_tag.outputs.latest }}"
          IFS='.' read -r major minor patch <<<"${latest#v}"
          msg=$(git log -1 --pretty=%B | tr -d '\n')
          if [[ "$msg" == *"[major]"* ]]; then
            major=$((major + 1)); minor=0; patch=0; bump="major"
          elif [[ "$msg" == *"[minor]"* ]]; then
            minor=$((minor + 1)); patch=0; bump="minor"
          else
            patch=$((patch + 1)); bump="patch"
          fi
          next="v$major.$minor.$patch"
          echo "next=$next" >> $GITHUB_OUTPUT
          echo "Bump: $bump → $next"

      - name: Create and push tag
        env:
          TAG: ${{ steps.next_tag.outputs.next }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$TAG"
          git push origin "$TAG"

  build-and-push:
    runs-on: ubuntu-latest
    needs: autotag
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      IMAGE_REPO: ghcr.io/${{ github.repository }}
      DEPLOY_TAG: ${{ needs.autotag.outputs.tag }}
    outputs:
      version: ${{ steps.outver.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set output version
        id: outver
        run: echo "tag=${DEPLOY_TAG}" >> "$GITHUB_OUTPUT"

      # Можно оставить metadata-action, но проще явно задать теги
      - name: Build and push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ env.DEPLOY_TAG }}
            ${{ env.IMAGE_REPO }}:sha-${{ github.sha }}
            ${{ env.IMAGE_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
        NAMESPACE: video-tester
        DS_NAME: video-tester
        IMAGE_REPO: ghcr.io/${{ github.repository }}
        DEPLOY_TAG: ${{ needs.build-and-push.outputs.version }}
    steps:
        - name: Setup kubectl
          uses: azure/setup-kubectl@v4

        - name: Write & patch kubeconfig
          env:
            KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
            K8S_API: ${{ secrets.K8S_API }}
          run: |
            mkdir -p ~/.kube
            printf '%s\n' "${KUBE_CONFIG}" > ~/.kube/config
            sed -i -E "s#server: https://[^:]+:6443#server: https://${K8S_API}:6443#g" ~/.kube/config
            kubectl version -o json | jq -r '"Client: \(.clientVersion.gitVersion)\nServer: \(.serverVersion.gitVersion)"'

        - name: Show image
          run: echo "Deploying ${IMAGE_REPO}:${DEPLOY_TAG} to ${NAMESPACE}/ds/${DS_NAME}"

        - name: Set image on DaemonSet
          run: kubectl -n "$NAMESPACE" set image ds/"$DS_NAME" app="${IMAGE_REPO}:${DEPLOY_TAG}"

        - name: Wait rollout
          run: kubectl -n "$NAMESPACE" rollout status ds/"$DS_NAME" --timeout=10m

        - name: Pods
          if: always()
          run: kubectl -n "$NAMESPACE" get pods -o wide -l app="$DS_NAME"

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy]
    if: always()
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 2

        - name: Telegram notify
          if: always()
          run: |
            RESULT="${{ needs.deploy.result }}"
            ICON="❌"; [ "$RESULT" = "success" ] && ICON="✅"

            COMMIT_MSG="$(git log -1 --pretty=%s)"
            COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
            RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

            # формируем ТЕКСТ с настоящими переносами строк (heredoc, без экранированных \n)
            TEXT="$(cat <<EOF
            ${ICON} *${{ github.repository }}* — deploy *${RESULT}*
            *Branch:* \`${{ github.ref_name }}\`
            *Tag:* \`${{ needs.build-and-push.outputs.version }}\`
            *Commit:* [${{ github.sha }}](${COMMIT_URL})
            *Message:* \`\`\`
            ${COMMIT_MSG}
            \`\`\`
            [View logs](${RUN_URL})
            EOF
            )"

            # отправка JSON (disable_web_page_preview отключает превью ссылок)
            jq -n \
            --arg chat_id "${{ secrets.TG_CHAT_ID }}" \
            --arg text "$TEXT" \
            --arg mode "Markdown" \
            '{chat_id:$chat_id, text:$text, parse_mode:$mode, disable_web_page_preview:true}' \
            | curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
                -H "Content-Type: application/json" \
                -d @-