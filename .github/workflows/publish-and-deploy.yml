name: Build, Push to GHCR and Deploy to k3s

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image: ${{ steps.meta.outputs.images }}
      version: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # ghcr.io/OWNER/REPO
          tags: |
            type=sha,format=short
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Pick deploy tag
        id: version
        run: |
          # берём предпочтительный тег для деплоя:
          # - если пуш тега vX.Y.Z → используем его
          # - иначе для main → latest
          # - иначе sha
          DEPLOY_TAG=""
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            DEPLOY_TAG="${GITHUB_REF#refs/tags/}"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            DEPLOY_TAG="latest"
          else
            DEPLOY_TAG="$(git rev-parse --short HEAD)"
          fi
          echo "tag=${DEPLOY_TAG}" >> $GITHUB_OUTPUT

      - name: Build and push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
    env:
      NAMESPACE: video-tester
      DS_NAME: video-tester
      # если у вас другой путь образа — переопредели IMAGE_REPO
      IMAGE_REPO: ghcr.io/${{ github.repository }}
      DEPLOY_TAG: ${{ needs.build-and-push.outputs.version }}
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Write kubeconfig
        run: |
          mkdir -p ~/.kube
          printf '%s\n' "${KUBE_CONFIG}" > ~/.kube/config
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

      - name: Show deploying image
        run: echo "Deploying $IMAGE_REPO:$DEPLOY_TAG to $NAMESPACE / ds/$DS_NAME"

      # Обновляем образ в DaemonSet (контейнер называется 'app' — поправь если другое имя)
      - name: Set image on DaemonSet
        run: |
          kubectl -n "$NAMESPACE" set image ds/"$DS_NAME" app="$IMAGE_REPO:$DEPLOY_TAG" --record

      - name: Wait for rollout
        run: |
          kubectl -n "$NAMESPACE" rollout status ds/"$DS_NAME" --timeout=10m

      # (опционально) показать новые поды
      - name: Pods
        if: always()
        run: kubectl -n "$NAMESPACE" get pods -o wide -l app=$DS_NAME